{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, CLEAR_DATA } from \"../constants/index\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"user\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        console.log(snapshot.data());\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i]));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      return function (dispatch) {\n        firebase.firestore().collection(\"user\").doc(uid).get().then(function (snapshot) {\n          if (snapshot.exists) {\n            var user = snapshot.data();\n            user.uid = snapshot.id;\n            dispatch({\n              type: USERS_DATA_STATE_CHANGE,\n              user: user\n            });\n          } else {\n            console.log('does not exist');\n          }\n        });\n      };\n\n      if (getPosts) {\n        dispatch(fetchUsersFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.query.EP.path.segments[1];\n      console.log({\n        snapshot: snapshot,\n        uid: uid\n      });\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n\n      for (var i = 0; i < posts.length; i++) {\n        dispatch(fetchUsersFollowingLikes(uid, posts[i].id));\n      }\n\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}\nexport function fetchUsersFollowingLikes(uid, postId) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").doc(postId).collection(\"likes\").doc(firebase.auth().currentUser.uid).onSnapshot(function (snapshot) {\n      var postId = snapshot.ZE.path.segments[3];\n      var currentUserLike = false;\n\n      if (snapshot.exists) {\n        currentUserLike = true;\n      }\n\n      dispatch({\n        type: USERS_LIKES_STATE_CHANGE,\n        postId: postId,\n        currentUserLike: currentUserLike\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/shrut/instagram/frontend/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_LIKES_STATE_CHANGE","CLEAR_DATA","firebase","require","clearData","dispatch","type","fetchUser","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","console","log","data","fetchUserPosts","orderBy","posts","docs","map","id","fetchUserFollowing","onSnapshot","following","i","length","fetchUsersData","getPosts","getState","found","usersState","users","some","el","user","fetchUsersFollowingPosts","query","EP","path","segments","find","fetchUsersFollowingLikes","USERS_POSTS_STATE_CHANGE","postId","ZE","currentUserLike"],"mappings":"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","sourcesContent":["import { USER_STATE_CHANGE,USER_POSTS_STATE_CHANGE,USER_FOLLOWING_STATE_CHANGE,USERS_DATA_STATE_CHANGE,USERS_LIKES_STATE_CHANGE,CLEAR_DATA} from '../constants/index'\r\nimport firebase from 'firebase'\r\nrequire('firebase/firestore')\r\n\r\n\r\nexport function clearData() {\r\n    return ((dispatch)=> {\r\n        dispatch({type: CLEAR_DATA})\r\n    })\r\n}\r\n\r\nexport function fetchUser(){\r\n    return((dispatch)=> {\r\n        firebase.firestore()\r\n           .collection(\"user\")\r\n           .doc(firebase.auth().currentUser.uid)\r\n           .get()\r\n           .then((snapshot) => {\r\n               if(snapshot.exists){\r\n                   console.log(snapshot.data())\r\n                   dispatch({type: USER_STATE_CHANGE,currentUser:snapshot.data()})\r\n\r\n               }\r\n               else{\r\n                   console.log('does not exist')\r\n               }\r\n           })\r\n\r\n    })\r\n}\r\n\r\nexport function fetchUserPosts(){\r\n    return((dispatch)=> {\r\n        firebase.firestore()\r\n           .collection(\"posts\")\r\n           .doc(firebase.auth().currentUser.uid)\r\n           .collection(\"userPosts\")\r\n           .orderBy(\"creation\",\"asc\")\r\n           .get()\r\n           .then((snapshot) => {\r\n               let posts= snapshot.docs.map(doc => {\r\n                   const data = doc.data();\r\n                   const id = doc.id;\r\n                   return { id, ...data}\r\n               })\r\n               dispatch({type: USER_POSTS_STATE_CHANGE,posts})\r\n           })\r\n\r\n    })\r\n}\r\n\r\nexport function fetchUserFollowing(){\r\n    return((dispatch)=> {\r\n        firebase.firestore()\r\n           .collection(\"following\")\r\n           .doc(firebase.auth().currentUser.uid)\r\n           .collection(\"userFollowing\")\r\n           \r\n           .onSnapshot((snapshot) => {\r\n               let following= snapshot.docs.map(doc => {\r\n                   const id = doc.id;\r\n                   return id\r\n               })\r\n               \r\n               dispatch({type: USER_FOLLOWING_STATE_CHANGE,following});\r\n               for(let i=0;i<following.length;i++)\r\n               {\r\n                   dispatch(fetchUsersData(following[i]));\r\n               }\r\n           })\r\n\r\n    })\r\n}\r\n\r\nexport function fetchUsersData(uid,getPosts){\r\n    return((dispatch,getState) => {\r\n        const found = getState().usersState.users.some(el => el.uid === uid);\r\n        if(!found){\r\n            return((dispatch)=> {\r\n                firebase.firestore()\r\n                   .collection(\"user\")\r\n                   .doc(uid)\r\n                   .get()\r\n                   .then((snapshot) => {\r\n                       if(snapshot.exists){\r\n                           let user = snapshot.data();\r\n                           user.uid = snapshot.id;\r\n                           dispatch({type: USERS_DATA_STATE_CHANGE,user});\r\n                           \r\n        \r\n                       }\r\n                       else{\r\n                           console.log('does not exist')\r\n                       }\r\n                   })\r\n        \r\n                })\r\n                if(getPosts){\r\n                    dispatch(fetchUsersFollowingPosts(uid)); \r\n\r\n                }\r\n\r\n        }\r\n\r\n    })\r\n}\r\n\r\nexport function fetchUsersFollowingPosts(uid){\r\n    return((dispatch,getState)=> {\r\n        firebase.firestore()\r\n           .collection(\"posts\")\r\n           .doc(uid)\r\n           .collection(\"userPosts\")\r\n           .orderBy(\"creation\",\"asc\")\r\n           .get()\r\n           .then((snapshot) => {\r\n               const uid = snapshot.query.EP.path.segments[1];\r\n               console.log({snapshot,uid});\r\n               const user = getState().usersState.users.find(el => el.uid === uid);\r\n               let posts= snapshot.docs.map(doc => {\r\n                   const data = doc.data();\r\n                   const id = doc.id;\r\n                   return { id, ...data,user}\r\n               })\r\n               for(let i=0;i<posts.length;i++){\r\n                   dispatch(fetchUsersFollowingLikes(uid,posts[i].id))\r\n               }\r\n               dispatch({type: USERS_POSTS_STATE_CHANGE,posts,uid})\r\n           })\r\n\r\n    })\r\n}\r\n\r\nexport function fetchUsersFollowingLikes(uid,postId){\r\n    return((dispatch,getState)=> {\r\n        firebase.firestore()\r\n           .collection(\"posts\")\r\n           .doc(uid)\r\n           .collection(\"userPosts\")\r\n           .doc(postId)\r\n           .collection(\"likes\")\r\n           .doc(firebase.auth().currentUser.uid)\r\n           .onSnapshot((snapshot) => {\r\n               const postId = snapshot.ZE.path.segments[3];\r\n               let currentUserLike = false;\r\n               if(snapshot.exists){\r\n                   currentUserLike = true;\r\n               }\r\n               \r\n               dispatch({type: USERS_LIKES_STATE_CHANGE,postId,currentUserLike})\r\n           })\r\n\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}